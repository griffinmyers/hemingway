require 'hemingway/build'
require 'hemingway/latex'
require "hemingway/special/special.treetop"
require "hemingway/tag/tag.treetop"
require "hemingway/math/math.treetop"
require "hemingway/text/text.treetop"
require "hemingway/block/block.treetop"
require "hemingway/footnote/footnote.treetop"

module Hemingway
  grammar Latex

    include Special
    include Tag
    include Math
    include Text
    include Block
    include Footnote

    rule document
      ( paragraph )* <DocumentNode>
    end

    # Example: These aren't the \n\n droids you're looking for \n\n. 
    # Notes: 
    #   - Okay so this is interesting. When you reference something with a * or
    #   a +, then you're creating a top level array-like structure that you'll 
    #   have to dig past to get at the list. elements[0] refers to the array of 
    #   tags or texts here. 
    rule paragraph
      sequence:( content / footnote )* eop <ParagraphNode>
    end

    # Example: \tag{text} or just text or $\Delta$
    # Notes: 
    #  - So I can define methods based on the ordered choice in the top
    #  level of this rule. Text is already its own thing though, so an html
    #  method need not be defined on it because alas, it already exists as
    #  defined in the text rule itself!
    rule content
      special / tag / block / math / text
    end 

    # Treetop does not separate lexing from parsing. Must consume all input. 
    rule whitespace
      ( " " / newline )*
    end

    # End of paragraph. Originally this had a choice for EOF, but I can't
    # seem to find a good way for Treetop to process that. My workaround
    # strategy will be to append some newlines onto the end of the input 
    # string. 
    rule eop
      newline 2..
    end

    rule newline
      "\n"
    end

  end
end