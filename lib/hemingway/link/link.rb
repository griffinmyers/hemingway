# Autogenerated from a Treetop grammar. Edits may be lost.


require "hemingway/link/link_nodes"

module Hemingway
  module Link
    include Treetop::Runtime

    def root
      @root ||= :link
    end

    module Link0
      def spaces1
        elements[1]
      end

      def url
        elements[3]
      end

      def spaces2
        elements[5]
      end

      def description
        elements[7]
      end

    end

    def _nt_link
      start_index = index
      if node_cache[:link].has_key?(index)
        cached = node_cache[:link][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("\\href", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure("\\href")
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_spaces
        s0 << r2
        if r2
          if has_terminal?("{", false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("{")
            r3 = nil
          end
          s0 << r3
          if r3
            r4 = _nt_link_text
            s0 << r4
            if r4
              if has_terminal?("}", false, index)
                r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("}")
                r5 = nil
              end
              s0 << r5
              if r5
                r6 = _nt_spaces
                s0 << r6
                if r6
                  if has_terminal?("{", false, index)
                    r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure("{")
                    r7 = nil
                  end
                  s0 << r7
                  if r7
                    r8 = _nt_link_text
                    s0 << r8
                    if r8
                      if has_terminal?("}", false, index)
                        r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure("}")
                        r9 = nil
                      end
                      s0 << r9
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(LinkNode,input, i0...index, s0)
        r0.extend(Link0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:link][start_index] = r0

      r0
    end

    module LinkText0
    end

    def _nt_link_text
      start_index = index
      if node_cache[:link_text].has_key?(index)
        cached = node_cache[:link_text][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        i1, s1 = index, []
        i2 = index
        if has_terminal?("}", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("}")
          r3 = nil
        end
        if r3
          r2 = nil
        else
          @index = i2
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r2
        if r2
          if index < input_length
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r4 = nil
          end
          s1 << r4
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(LinkText0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

      node_cache[:link_text][start_index] = r0

      r0
    end

    def _nt_spaces
      start_index = index
      if node_cache[:spaces].has_key?(index)
        cached = node_cache[:spaces][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        if has_terminal?(" ", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(" ")
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

      node_cache[:spaces][start_index] = r0

      r0
    end

  end

  class LinkParser < Treetop::Runtime::CompiledParser
    include Link
  end

end